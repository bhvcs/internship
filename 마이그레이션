파이썬의 fastapi를 기반으로 웹 서버를 구축

pydantic 라이브러리 이용, .env 파일에 db 관련 정보를 담아두고, Settings 클래스를 두어, 해당 정보들을 담은 객체를 만든다.

데이터베이스의 버전 관리를 위한 마이그레이션 툴이 있다. alembic.
기존에 설정된 데이터베이스 마이그레이션 파일이 있다. 이를 내 로컬 db에 적용하기로 한다. alembic upgrade head
기존 만들어두었던 모델에 특정 필드들을 추가했다. 이를 다시 db에 적용하기로 한다. 1. alembic --autogenerate 2. alembic upgrade head
autogenerate로 전 버전의 마이그레이션 파일과 비교를 통해 새로운 마이그레이션 파일을 생성한다.

내가 생성한 마이그레이션 파일의 이름을 수정해달라는 요청이 있었다.
1. 버전을 뒤로 되돌린다.
2. --autogenerate로 버전 파일을 다시 만든다. 이때 이름을 바꾼다.
3. alembic upgrade head로 다시 db에 업데이트 한다. // 사실 2번 과정에서 목표는 달성한셈.
근데 특정 버전을 찾을 수 없다는 에러가 나왔다. 살펴보니, db의 alembic_version 테이블에 해당 버전이 덩그러니 있는 것이 보였다.
그리고 alembic history를 봤는데 해당 리비전은 존재하지 않았다. 어떤 이유에선지 동기화가 되지 않았던 것 같다.
그래서 해당 테이블을 없애고 다시 만들어서 일단은 해결했다. 

새로운 모델을 만들어야 함.
기존 모델 클래스를 보니 DeclarativeBase를 상속받는 Base를 상속 받았음.
DeclarativeBase는 sqlAlchemy 라이브러리의 클래스이며, 이를 상속 받으면 해당 클래스가 데이터베이스의 테이블과 매핑된 모델이라고 명시하는 것.

id 필드를 정의할 떄, uuid의 형태로 저장하도록 했다.
uuid의 장점: 전세계적으로 (거의) 고유한 값을 생성할 수 있다. 그래서 autoincrement로 id를 지정하는 것보다 id의 고유성이 올라가겠다.
그리고 id가 겹쳐서 에러가 나는 경우가 거의 없을 것이므로 확장성 측면에서도 좋다.
단점: 공간을 많이 차지.(128비트)
